// SPDX-License-Identifier: MIT
pragma solidity ^0.8.9;

contract EventRegistration {
    string public eventName;
    address public organizer;
    uint public maxParticipants;
    uint public registrationCount;
    bool public registrationOpen;

    struct Participant {
        string name;
        string email;
        bool registered;
    }

    mapping(address => Participant) public participants;
    address[] public participantAddresses;  // Array to track participant addresses

    // Events
    event RegistrationOpened(uint maxParticipants);
    event RegistrationClosed();
    event ParticipantRegistered(address indexed participant, string name);
    event ParticipantRemoved(address indexed participant);
    
    constructor(string memory _eventName, uint _maxParticipants) {
        organizer = msg.sender;
        eventName = _eventName;
        maxParticipants = _maxParticipants;
        registrationCount = 0;
        registrationOpen = false;
    }

    modifier onlyOrganizer() {
        require(msg.sender == organizer, "Only the organizer can call this function");
        _;
    }

    modifier onlyWhenOpen() {
        require(registrationOpen, "Registration is not open");
        _;
    }

    modifier onlyWhenClosed() {
        require(!registrationOpen, "Registration is still open");
        _;
    }

    function openRegistration() public onlyOrganizer onlyWhenClosed {
        registrationOpen = true;
        emit RegistrationOpened(maxParticipants);
    }

    function closeRegistration() public onlyOrganizer onlyWhenOpen {
        registrationOpen = false;
        emit RegistrationClosed();
    }

    function register(string memory _name, string memory _email) public onlyWhenOpen {
        require(!participants[msg.sender].registered, "Already registered");
        require(registrationCount < maxParticipants, "Event is fully booked");

        participants[msg.sender] = Participant(_name, _email, true);
        participantAddresses.push(msg.sender);  // Add participant address to the array
        registrationCount++;
        emit ParticipantRegistered(msg.sender, _name);
    }

    function removeParticipant(address _participant) public onlyOrganizer onlyWhenClosed {
        require(participants[_participant].registered, "Participant not registered");

        // Find and remove participant from the array
        for (uint i = 0; i < participantAddresses.length; i++) {
            if (participantAddresses[i] == _participant) {
                participantAddresses[i] = participantAddresses[participantAddresses.length - 1];
                participantAddresses.pop();
                break;
            }
        }

        delete participants[_participant];
        registrationCount--;
        emit ParticipantRemoved(_participant);
    }

    function getParticipant(address _participant) public view returns (string memory name, string memory email) {
        require(participants[_participant].registered, "Participant not registered");
        Participant memory participant = participants[_participant];
        return (participant.name, participant.email);
    }

    function getAllParticipants() public view onlyOrganizer returns (Participant[] memory) {
        Participant[] memory allParticipants = new Participant[](registrationCount);
        for (uint i = 0; i < participantAddresses.length; i++) {
            address participantAddress = participantAddresses[i];
            if (participants[participantAddress].registered) {
                allParticipants[i] = participants[participantAddress];
            }
        }
        return allParticipants;
    }
}
